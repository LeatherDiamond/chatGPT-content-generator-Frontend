import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Layout from '../Layout/Layout';
import Lottie from 'lottie-react';
import brushAnimationData from './brush_animation.json'
import robotImage from './robot.png'

function GeneratedImageForm() {
  const apiUrl = process.env.REACT_APP_API_URL;
  const [description, setDescription] = useState('');
  const [fileDownloadUrl, setFileDownloadUrl] = useState('');
  const [imageSrc, setImageSrc] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showText, setShowText] = useState(false);
  const [typedText, setTypedText] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setTypedText('');

    try {
      const response = await axios.post(`${apiUrl}/response/generated-images/`, { description }, { responseType: 'arraybuffer' });
      const blob = new Blob([response.data], { type: 'image/png' });
      const imageUrl = URL.createObjectURL(blob);
      setImageSrc(imageUrl);
      setFileDownloadUrl(imageUrl);
    } catch (error) {
      console.error('Error when generating an image:', error);
    }

    setTimeout(() => {
      setIsLoading(false);
      setShowText(true);
    }, 1000);
  };

  useEffect(() => {
    if (showText && typedText.length < "Picture generated by artificial intelligence on your request. Click on it to open it in full size or click the download button to download it to your computer. Keep in mind that AI does not always understand your idea and may need several queries to suit your tastes.".length) {
      const typingInterval = setInterval(() => {
        setTypedText((prevText) => prevText + "Picture generated by artificial intelligence on your request. Click on it to open it in full size or click the download button to download it to your computer. Keep in mind that AI does not always understand your idea and may need several queries to suit your tastes."[prevText.length]);
      }, 50);
      return () => clearInterval(typingInterval);
    }
  }, [showText, typedText]);

  return (
    <Layout>
      <div className="image-form">
        <h2 style={{ marginBottom: '20px' }}>Generate an image for your needs:</h2>
        <form onSubmit={handleSubmit} className="mb-4">
          <div className="form-floating">
            <input
              type="text"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="form-control"
              placeholder="Enter image description"
              id="image-description"
              name="image-description"
            />
            <label htmlFor="image-description">Image Description</label> {}
          </div>
          <button type="submit" disabled={isLoading || description.trim() === ''} className="btn btn-primary mt-2">
            {isLoading ? 'Generating...' : 'Generate Image'}
          </button>
        </form>
        {isLoading ? (
            <div className="loading-animation">
              <div className="lottie-animation">
                <Lottie options={{ animationData: brushAnimationData, loop: true, autoplay: true }} width={200} height={200} />
              </div>
            </div>
          ) : null}
          {!isLoading && fileDownloadUrl && (
            <div style={{ display: 'flex', alignItems: 'center', position: 'relative' }}>
              <div style={{ width: '30%', marginRight: '40px' }}>
                <a href={imageSrc} target="_blank" rel="noopener noreferrer">
                  <img src={imageSrc} alt="Generated image" style={{ width: '100%', cursor: 'pointer', border: '3px solid #ddd' }} />
                </a>
              </div>
              {showText && (
                <div className="chat-bubble">
                  <span className="typed-text">{typedText}</span>
                </div>
              )}
              <div style={{ width: '12%', height: '140px', marginLeft: '-30px', marginTop: '30px', position: 'relative' }}>
                <img src={robotImage} alt="Robot" style={{ width: '100%' }} />
              </div>
            </div>
          )}
        {!isLoading && fileDownloadUrl && (
          <div style={{ display: 'flex', justifyContent: 'right', position: 'relative', marginTop: '-40px'}}>
            <a href={fileDownloadUrl} download className="btn btn-success">Download the image</a>
          </div>
        )}
      </div>
    </Layout>
  );
}

export default GeneratedImageForm;